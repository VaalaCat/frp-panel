// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "api_server.proto" (package "api_server", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ProxyInfo } from "./common";
import { Server } from "./common";
import { Status } from "./common";
/**
 * @generated from protobuf message api_server.InitServerRequest
 */
export interface InitServerRequest {
    /**
     * @generated from protobuf field: optional string server_id = 1;
     */
    serverId?: string;
    /**
     * @generated from protobuf field: optional string server_ip = 2;
     */
    serverIp?: string;
    /**
     * @generated from protobuf field: optional string comment = 3;
     */
    comment?: string;
}
/**
 * @generated from protobuf message api_server.InitServerResponse
 */
export interface InitServerResponse {
    /**
     * @generated from protobuf field: optional common.Status status = 1;
     */
    status?: Status;
    /**
     * @generated from protobuf field: optional string server_id = 2;
     */
    serverId?: string;
}
/**
 * @generated from protobuf message api_server.ListServersRequest
 */
export interface ListServersRequest {
    /**
     * @generated from protobuf field: optional int32 page = 1;
     */
    page?: number;
    /**
     * @generated from protobuf field: optional int32 page_size = 2;
     */
    pageSize?: number;
    /**
     * @generated from protobuf field: optional string keyword = 3;
     */
    keyword?: string;
}
/**
 * @generated from protobuf message api_server.ListServersResponse
 */
export interface ListServersResponse {
    /**
     * @generated from protobuf field: optional common.Status status = 1;
     */
    status?: Status;
    /**
     * @generated from protobuf field: optional int32 total = 2;
     */
    total?: number;
    /**
     * @generated from protobuf field: repeated common.Server servers = 3;
     */
    servers: Server[];
}
/**
 * @generated from protobuf message api_server.GetServerRequest
 */
export interface GetServerRequest {
    /**
     * @generated from protobuf field: optional string server_id = 1;
     */
    serverId?: string;
}
/**
 * @generated from protobuf message api_server.GetServerResponse
 */
export interface GetServerResponse {
    /**
     * @generated from protobuf field: optional common.Status status = 1;
     */
    status?: Status;
    /**
     * @generated from protobuf field: optional common.Server server = 2;
     */
    server?: Server;
}
/**
 * @generated from protobuf message api_server.DeleteServerRequest
 */
export interface DeleteServerRequest {
    /**
     * @generated from protobuf field: optional string server_id = 1;
     */
    serverId?: string;
}
/**
 * @generated from protobuf message api_server.DeleteServerResponse
 */
export interface DeleteServerResponse {
    /**
     * @generated from protobuf field: optional common.Status status = 1;
     */
    status?: Status;
}
/**
 * @generated from protobuf message api_server.UpdateFRPSRequest
 */
export interface UpdateFRPSRequest {
    /**
     * @generated from protobuf field: optional string server_id = 1;
     */
    serverId?: string;
    /**
     * @generated from protobuf field: optional bytes config = 2;
     */
    config?: Uint8Array;
    /**
     * @generated from protobuf field: optional string comment = 3;
     */
    comment?: string;
}
/**
 * @generated from protobuf message api_server.UpdateFRPSResponse
 */
export interface UpdateFRPSResponse {
    /**
     * @generated from protobuf field: optional common.Status status = 1;
     */
    status?: Status;
}
/**
 * @generated from protobuf message api_server.RemoveFRPSRequest
 */
export interface RemoveFRPSRequest {
    /**
     * @generated from protobuf field: optional string server_id = 1;
     */
    serverId?: string;
}
/**
 * @generated from protobuf message api_server.RemoveFRPSResponse
 */
export interface RemoveFRPSResponse {
    /**
     * @generated from protobuf field: optional common.Status status = 1;
     */
    status?: Status;
}
/**
 * @generated from protobuf message api_server.StopFRPSRequest
 */
export interface StopFRPSRequest {
    /**
     * @generated from protobuf field: optional string server_id = 1;
     */
    serverId?: string;
}
/**
 * @generated from protobuf message api_server.StopFRPSResponse
 */
export interface StopFRPSResponse {
    /**
     * @generated from protobuf field: optional common.Status status = 1;
     */
    status?: Status;
}
/**
 * @generated from protobuf message api_server.StartFRPSRequest
 */
export interface StartFRPSRequest {
    /**
     * @generated from protobuf field: optional string server_id = 1;
     */
    serverId?: string;
}
/**
 * @generated from protobuf message api_server.StartFRPSResponse
 */
export interface StartFRPSResponse {
    /**
     * @generated from protobuf field: optional common.Status status = 1;
     */
    status?: Status;
}
/**
 * @generated from protobuf message api_server.GetProxyBySIDRequest
 */
export interface GetProxyBySIDRequest {
    /**
     * @generated from protobuf field: optional string server_id = 1;
     */
    serverId?: string;
}
/**
 * @generated from protobuf message api_server.GetProxyBySIDResponse
 */
export interface GetProxyBySIDResponse {
    /**
     * @generated from protobuf field: optional common.Status status = 1;
     */
    status?: Status;
    /**
     * @generated from protobuf field: repeated common.ProxyInfo proxy_infos = 2;
     */
    proxyInfos: ProxyInfo[];
}
// @generated message type with reflection information, may provide speed optimized methods
class InitServerRequest$Type extends MessageType<InitServerRequest> {
    constructor() {
        super("api_server.InitServerRequest", [
            { no: 1, name: "server_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "server_ip", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "comment", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InitServerRequest>): InitServerRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<InitServerRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InitServerRequest): InitServerRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string server_id */ 1:
                    message.serverId = reader.string();
                    break;
                case /* optional string server_ip */ 2:
                    message.serverIp = reader.string();
                    break;
                case /* optional string comment */ 3:
                    message.comment = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InitServerRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string server_id = 1; */
        if (message.serverId !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.serverId);
        /* optional string server_ip = 2; */
        if (message.serverIp !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.serverIp);
        /* optional string comment = 3; */
        if (message.comment !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.comment);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_server.InitServerRequest
 */
export const InitServerRequest = new InitServerRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InitServerResponse$Type extends MessageType<InitServerResponse> {
    constructor() {
        super("api_server.InitServerResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status },
            { no: 2, name: "server_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InitServerResponse>): InitServerResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<InitServerResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InitServerResponse): InitServerResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional common.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* optional string server_id */ 2:
                    message.serverId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InitServerResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional common.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional string server_id = 2; */
        if (message.serverId !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.serverId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_server.InitServerResponse
 */
export const InitServerResponse = new InitServerResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListServersRequest$Type extends MessageType<ListServersRequest> {
    constructor() {
        super("api_server.ListServersRequest", [
            { no: 1, name: "page", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "page_size", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "keyword", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListServersRequest>): ListServersRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListServersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListServersRequest): ListServersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 page */ 1:
                    message.page = reader.int32();
                    break;
                case /* optional int32 page_size */ 2:
                    message.pageSize = reader.int32();
                    break;
                case /* optional string keyword */ 3:
                    message.keyword = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListServersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 page = 1; */
        if (message.page !== undefined)
            writer.tag(1, WireType.Varint).int32(message.page);
        /* optional int32 page_size = 2; */
        if (message.pageSize !== undefined)
            writer.tag(2, WireType.Varint).int32(message.pageSize);
        /* optional string keyword = 3; */
        if (message.keyword !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.keyword);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_server.ListServersRequest
 */
export const ListServersRequest = new ListServersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListServersResponse$Type extends MessageType<ListServersResponse> {
    constructor() {
        super("api_server.ListServersResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status },
            { no: 2, name: "total", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "servers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Server }
        ]);
    }
    create(value?: PartialMessage<ListServersResponse>): ListServersResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.servers = [];
        if (value !== undefined)
            reflectionMergePartial<ListServersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListServersResponse): ListServersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional common.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* optional int32 total */ 2:
                    message.total = reader.int32();
                    break;
                case /* repeated common.Server servers */ 3:
                    message.servers.push(Server.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListServersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional common.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 total = 2; */
        if (message.total !== undefined)
            writer.tag(2, WireType.Varint).int32(message.total);
        /* repeated common.Server servers = 3; */
        for (let i = 0; i < message.servers.length; i++)
            Server.internalBinaryWrite(message.servers[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_server.ListServersResponse
 */
export const ListServersResponse = new ListServersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetServerRequest$Type extends MessageType<GetServerRequest> {
    constructor() {
        super("api_server.GetServerRequest", [
            { no: 1, name: "server_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetServerRequest>): GetServerRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetServerRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetServerRequest): GetServerRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string server_id */ 1:
                    message.serverId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetServerRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string server_id = 1; */
        if (message.serverId !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.serverId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_server.GetServerRequest
 */
export const GetServerRequest = new GetServerRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetServerResponse$Type extends MessageType<GetServerResponse> {
    constructor() {
        super("api_server.GetServerResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status },
            { no: 2, name: "server", kind: "message", T: () => Server }
        ]);
    }
    create(value?: PartialMessage<GetServerResponse>): GetServerResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetServerResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetServerResponse): GetServerResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional common.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* optional common.Server server */ 2:
                    message.server = Server.internalBinaryRead(reader, reader.uint32(), options, message.server);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetServerResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional common.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional common.Server server = 2; */
        if (message.server)
            Server.internalBinaryWrite(message.server, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_server.GetServerResponse
 */
export const GetServerResponse = new GetServerResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteServerRequest$Type extends MessageType<DeleteServerRequest> {
    constructor() {
        super("api_server.DeleteServerRequest", [
            { no: 1, name: "server_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteServerRequest>): DeleteServerRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteServerRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteServerRequest): DeleteServerRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string server_id */ 1:
                    message.serverId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteServerRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string server_id = 1; */
        if (message.serverId !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.serverId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_server.DeleteServerRequest
 */
export const DeleteServerRequest = new DeleteServerRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteServerResponse$Type extends MessageType<DeleteServerResponse> {
    constructor() {
        super("api_server.DeleteServerResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status }
        ]);
    }
    create(value?: PartialMessage<DeleteServerResponse>): DeleteServerResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteServerResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteServerResponse): DeleteServerResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional common.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteServerResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional common.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_server.DeleteServerResponse
 */
export const DeleteServerResponse = new DeleteServerResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateFRPSRequest$Type extends MessageType<UpdateFRPSRequest> {
    constructor() {
        super("api_server.UpdateFRPSRequest", [
            { no: 1, name: "server_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "config", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "comment", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateFRPSRequest>): UpdateFRPSRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateFRPSRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateFRPSRequest): UpdateFRPSRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string server_id */ 1:
                    message.serverId = reader.string();
                    break;
                case /* optional bytes config */ 2:
                    message.config = reader.bytes();
                    break;
                case /* optional string comment */ 3:
                    message.comment = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateFRPSRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string server_id = 1; */
        if (message.serverId !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.serverId);
        /* optional bytes config = 2; */
        if (message.config !== undefined)
            writer.tag(2, WireType.LengthDelimited).bytes(message.config);
        /* optional string comment = 3; */
        if (message.comment !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.comment);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_server.UpdateFRPSRequest
 */
export const UpdateFRPSRequest = new UpdateFRPSRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateFRPSResponse$Type extends MessageType<UpdateFRPSResponse> {
    constructor() {
        super("api_server.UpdateFRPSResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status }
        ]);
    }
    create(value?: PartialMessage<UpdateFRPSResponse>): UpdateFRPSResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateFRPSResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateFRPSResponse): UpdateFRPSResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional common.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateFRPSResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional common.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_server.UpdateFRPSResponse
 */
export const UpdateFRPSResponse = new UpdateFRPSResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveFRPSRequest$Type extends MessageType<RemoveFRPSRequest> {
    constructor() {
        super("api_server.RemoveFRPSRequest", [
            { no: 1, name: "server_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveFRPSRequest>): RemoveFRPSRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RemoveFRPSRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveFRPSRequest): RemoveFRPSRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string server_id */ 1:
                    message.serverId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveFRPSRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string server_id = 1; */
        if (message.serverId !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.serverId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_server.RemoveFRPSRequest
 */
export const RemoveFRPSRequest = new RemoveFRPSRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveFRPSResponse$Type extends MessageType<RemoveFRPSResponse> {
    constructor() {
        super("api_server.RemoveFRPSResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status }
        ]);
    }
    create(value?: PartialMessage<RemoveFRPSResponse>): RemoveFRPSResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RemoveFRPSResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveFRPSResponse): RemoveFRPSResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional common.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveFRPSResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional common.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_server.RemoveFRPSResponse
 */
export const RemoveFRPSResponse = new RemoveFRPSResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StopFRPSRequest$Type extends MessageType<StopFRPSRequest> {
    constructor() {
        super("api_server.StopFRPSRequest", [
            { no: 1, name: "server_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StopFRPSRequest>): StopFRPSRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StopFRPSRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StopFRPSRequest): StopFRPSRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string server_id */ 1:
                    message.serverId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StopFRPSRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string server_id = 1; */
        if (message.serverId !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.serverId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_server.StopFRPSRequest
 */
export const StopFRPSRequest = new StopFRPSRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StopFRPSResponse$Type extends MessageType<StopFRPSResponse> {
    constructor() {
        super("api_server.StopFRPSResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status }
        ]);
    }
    create(value?: PartialMessage<StopFRPSResponse>): StopFRPSResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StopFRPSResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StopFRPSResponse): StopFRPSResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional common.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StopFRPSResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional common.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_server.StopFRPSResponse
 */
export const StopFRPSResponse = new StopFRPSResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartFRPSRequest$Type extends MessageType<StartFRPSRequest> {
    constructor() {
        super("api_server.StartFRPSRequest", [
            { no: 1, name: "server_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StartFRPSRequest>): StartFRPSRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StartFRPSRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartFRPSRequest): StartFRPSRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string server_id */ 1:
                    message.serverId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartFRPSRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string server_id = 1; */
        if (message.serverId !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.serverId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_server.StartFRPSRequest
 */
export const StartFRPSRequest = new StartFRPSRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartFRPSResponse$Type extends MessageType<StartFRPSResponse> {
    constructor() {
        super("api_server.StartFRPSResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status }
        ]);
    }
    create(value?: PartialMessage<StartFRPSResponse>): StartFRPSResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StartFRPSResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartFRPSResponse): StartFRPSResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional common.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartFRPSResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional common.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_server.StartFRPSResponse
 */
export const StartFRPSResponse = new StartFRPSResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetProxyBySIDRequest$Type extends MessageType<GetProxyBySIDRequest> {
    constructor() {
        super("api_server.GetProxyBySIDRequest", [
            { no: 1, name: "server_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetProxyBySIDRequest>): GetProxyBySIDRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetProxyBySIDRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetProxyBySIDRequest): GetProxyBySIDRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string server_id */ 1:
                    message.serverId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetProxyBySIDRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string server_id = 1; */
        if (message.serverId !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.serverId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_server.GetProxyBySIDRequest
 */
export const GetProxyBySIDRequest = new GetProxyBySIDRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetProxyBySIDResponse$Type extends MessageType<GetProxyBySIDResponse> {
    constructor() {
        super("api_server.GetProxyBySIDResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status },
            { no: 2, name: "proxy_infos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ProxyInfo }
        ]);
    }
    create(value?: PartialMessage<GetProxyBySIDResponse>): GetProxyBySIDResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.proxyInfos = [];
        if (value !== undefined)
            reflectionMergePartial<GetProxyBySIDResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetProxyBySIDResponse): GetProxyBySIDResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional common.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* repeated common.ProxyInfo proxy_infos */ 2:
                    message.proxyInfos.push(ProxyInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetProxyBySIDResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional common.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated common.ProxyInfo proxy_infos = 2; */
        for (let i = 0; i < message.proxyInfos.length; i++)
            ProxyInfo.internalBinaryWrite(message.proxyInfos[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_server.GetProxyBySIDResponse
 */
export const GetProxyBySIDResponse = new GetProxyBySIDResponse$Type();
