// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "api_master.proto" (package "api_master", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Status } from "./common";
import { ClientType } from "./common";
/**
 * @generated from protobuf message api_master.ClientStatus
 */
export interface ClientStatus {
    /**
     * @generated from protobuf field: common.ClientType client_type = 1;
     */
    clientType: ClientType;
    /**
     * @generated from protobuf field: string client_id = 2;
     */
    clientId: string;
    /**
     * @generated from protobuf field: api_master.ClientStatus.Status status = 3;
     */
    status: ClientStatus_Status;
    /**
     * @generated from protobuf field: int32 ping = 4;
     */
    ping: number; // 单位为毫秒
}
/**
 * @generated from protobuf enum api_master.ClientStatus.Status
 */
export enum ClientStatus_Status {
    /**
     * @generated from protobuf enum value: STATUS_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: STATUS_ONLINE = 1;
     */
    ONLINE = 1,
    /**
     * @generated from protobuf enum value: STATUS_OFFLINE = 2;
     */
    OFFLINE = 2,
    /**
     * @generated from protobuf enum value: STATUS_ERROR = 3;
     */
    ERROR = 3
}
/**
 * @generated from protobuf message api_master.GetClientsStatusRequest
 */
export interface GetClientsStatusRequest {
    /**
     * @generated from protobuf field: common.ClientType client_type = 1;
     */
    clientType: ClientType;
    /**
     * @generated from protobuf field: repeated string client_ids = 2;
     */
    clientIds: string[];
}
/**
 * @generated from protobuf message api_master.GetClientsStatusResponse
 */
export interface GetClientsStatusResponse {
    /**
     * @generated from protobuf field: optional common.Status status = 1;
     */
    status?: Status;
    /**
     * @generated from protobuf field: map<string, api_master.ClientStatus> clients = 2;
     */
    clients: {
        [key: string]: ClientStatus;
    };
}
/**
 * @generated from protobuf message api_master.GetClientCertRequest
 */
export interface GetClientCertRequest {
    /**
     * @generated from protobuf field: common.ClientType client_type = 1;
     */
    clientType: ClientType;
    /**
     * @generated from protobuf field: string client_id = 2;
     */
    clientId: string;
    /**
     * @generated from protobuf field: string client_secret = 3;
     */
    clientSecret: string;
}
/**
 * @generated from protobuf message api_master.GetClientCertResponse
 */
export interface GetClientCertResponse {
    /**
     * @generated from protobuf field: optional common.Status status = 1;
     */
    status?: Status;
    /**
     * @generated from protobuf field: bytes cert = 2;
     */
    cert: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class ClientStatus$Type extends MessageType<ClientStatus> {
    constructor() {
        super("api_master.ClientStatus", [
            { no: 1, name: "client_type", kind: "enum", T: () => ["common.ClientType", ClientType, "CLIENT_TYPE_"] },
            { no: 2, name: "client_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "status", kind: "enum", T: () => ["api_master.ClientStatus.Status", ClientStatus_Status, "STATUS_"] },
            { no: 4, name: "ping", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ClientStatus>): ClientStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clientType = 0;
        message.clientId = "";
        message.status = 0;
        message.ping = 0;
        if (value !== undefined)
            reflectionMergePartial<ClientStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientStatus): ClientStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.ClientType client_type */ 1:
                    message.clientType = reader.int32();
                    break;
                case /* string client_id */ 2:
                    message.clientId = reader.string();
                    break;
                case /* api_master.ClientStatus.Status status */ 3:
                    message.status = reader.int32();
                    break;
                case /* int32 ping */ 4:
                    message.ping = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.ClientType client_type = 1; */
        if (message.clientType !== 0)
            writer.tag(1, WireType.Varint).int32(message.clientType);
        /* string client_id = 2; */
        if (message.clientId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.clientId);
        /* api_master.ClientStatus.Status status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).int32(message.status);
        /* int32 ping = 4; */
        if (message.ping !== 0)
            writer.tag(4, WireType.Varint).int32(message.ping);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_master.ClientStatus
 */
export const ClientStatus = new ClientStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetClientsStatusRequest$Type extends MessageType<GetClientsStatusRequest> {
    constructor() {
        super("api_master.GetClientsStatusRequest", [
            { no: 1, name: "client_type", kind: "enum", T: () => ["common.ClientType", ClientType, "CLIENT_TYPE_"] },
            { no: 2, name: "client_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetClientsStatusRequest>): GetClientsStatusRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clientType = 0;
        message.clientIds = [];
        if (value !== undefined)
            reflectionMergePartial<GetClientsStatusRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetClientsStatusRequest): GetClientsStatusRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.ClientType client_type */ 1:
                    message.clientType = reader.int32();
                    break;
                case /* repeated string client_ids */ 2:
                    message.clientIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetClientsStatusRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.ClientType client_type = 1; */
        if (message.clientType !== 0)
            writer.tag(1, WireType.Varint).int32(message.clientType);
        /* repeated string client_ids = 2; */
        for (let i = 0; i < message.clientIds.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.clientIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_master.GetClientsStatusRequest
 */
export const GetClientsStatusRequest = new GetClientsStatusRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetClientsStatusResponse$Type extends MessageType<GetClientsStatusResponse> {
    constructor() {
        super("api_master.GetClientsStatusResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status },
            { no: 2, name: "clients", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => ClientStatus } }
        ]);
    }
    create(value?: PartialMessage<GetClientsStatusResponse>): GetClientsStatusResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clients = {};
        if (value !== undefined)
            reflectionMergePartial<GetClientsStatusResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetClientsStatusResponse): GetClientsStatusResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional common.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* map<string, api_master.ClientStatus> clients */ 2:
                    this.binaryReadMap2(message.clients, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: GetClientsStatusResponse["clients"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GetClientsStatusResponse["clients"] | undefined, val: GetClientsStatusResponse["clients"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = ClientStatus.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field api_master.GetClientsStatusResponse.clients");
            }
        }
        map[key ?? ""] = val ?? ClientStatus.create();
    }
    internalBinaryWrite(message: GetClientsStatusResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional common.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* map<string, api_master.ClientStatus> clients = 2; */
        for (let k of globalThis.Object.keys(message.clients)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            ClientStatus.internalBinaryWrite(message.clients[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_master.GetClientsStatusResponse
 */
export const GetClientsStatusResponse = new GetClientsStatusResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetClientCertRequest$Type extends MessageType<GetClientCertRequest> {
    constructor() {
        super("api_master.GetClientCertRequest", [
            { no: 1, name: "client_type", kind: "enum", T: () => ["common.ClientType", ClientType, "CLIENT_TYPE_"] },
            { no: 2, name: "client_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "client_secret", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetClientCertRequest>): GetClientCertRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clientType = 0;
        message.clientId = "";
        message.clientSecret = "";
        if (value !== undefined)
            reflectionMergePartial<GetClientCertRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetClientCertRequest): GetClientCertRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.ClientType client_type */ 1:
                    message.clientType = reader.int32();
                    break;
                case /* string client_id */ 2:
                    message.clientId = reader.string();
                    break;
                case /* string client_secret */ 3:
                    message.clientSecret = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetClientCertRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.ClientType client_type = 1; */
        if (message.clientType !== 0)
            writer.tag(1, WireType.Varint).int32(message.clientType);
        /* string client_id = 2; */
        if (message.clientId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.clientId);
        /* string client_secret = 3; */
        if (message.clientSecret !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.clientSecret);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_master.GetClientCertRequest
 */
export const GetClientCertRequest = new GetClientCertRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetClientCertResponse$Type extends MessageType<GetClientCertResponse> {
    constructor() {
        super("api_master.GetClientCertResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status },
            { no: 2, name: "cert", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<GetClientCertResponse>): GetClientCertResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cert = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<GetClientCertResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetClientCertResponse): GetClientCertResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional common.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* bytes cert */ 2:
                    message.cert = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetClientCertResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional common.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bytes cert = 2; */
        if (message.cert.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.cert);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_master.GetClientCertResponse
 */
export const GetClientCertResponse = new GetClientCertResponse$Type();
