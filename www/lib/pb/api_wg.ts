// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "api_wg.proto" (package "api_wireguard", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { WireGuardLink } from "./types_wg";
import { WGDeviceRuntimeInfo } from "./types_wg";
import { WireGuardConfig } from "./types_wg";
import { Endpoint } from "./types_wg";
import { WireGuardLinks } from "./types_wg";
import { Status } from "./common";
import { Network } from "./types_wg";
/**
 * @generated from protobuf message api_wireguard.CreateNetworkRequest
 */
export interface CreateNetworkRequest {
    /**
     * @generated from protobuf field: optional wireguard.Network network = 1;
     */
    network?: Network;
}
/**
 * @generated from protobuf message api_wireguard.CreateNetworkResponse
 */
export interface CreateNetworkResponse {
    /**
     * @generated from protobuf field: optional common.Status status = 1;
     */
    status?: Status;
    /**
     * @generated from protobuf field: optional wireguard.Network network = 2;
     */
    network?: Network;
}
/**
 * @generated from protobuf message api_wireguard.DeleteNetworkRequest
 */
export interface DeleteNetworkRequest {
    /**
     * @generated from protobuf field: optional uint32 id = 1;
     */
    id?: number;
}
/**
 * @generated from protobuf message api_wireguard.DeleteNetworkResponse
 */
export interface DeleteNetworkResponse {
    /**
     * @generated from protobuf field: optional common.Status status = 1;
     */
    status?: Status;
}
/**
 * @generated from protobuf message api_wireguard.UpdateNetworkRequest
 */
export interface UpdateNetworkRequest {
    /**
     * @generated from protobuf field: optional wireguard.Network network = 1;
     */
    network?: Network;
}
/**
 * @generated from protobuf message api_wireguard.UpdateNetworkResponse
 */
export interface UpdateNetworkResponse {
    /**
     * @generated from protobuf field: optional common.Status status = 1;
     */
    status?: Status;
    /**
     * @generated from protobuf field: optional wireguard.Network network = 2;
     */
    network?: Network;
}
/**
 * @generated from protobuf message api_wireguard.GetNetworkRequest
 */
export interface GetNetworkRequest {
    /**
     * @generated from protobuf field: optional uint32 id = 1;
     */
    id?: number;
}
/**
 * @generated from protobuf message api_wireguard.GetNetworkResponse
 */
export interface GetNetworkResponse {
    /**
     * @generated from protobuf field: optional common.Status status = 1;
     */
    status?: Status;
    /**
     * @generated from protobuf field: optional wireguard.Network network = 2;
     */
    network?: Network;
}
/**
 * @generated from protobuf message api_wireguard.ListNetworksRequest
 */
export interface ListNetworksRequest {
    /**
     * @generated from protobuf field: optional int32 page = 1;
     */
    page?: number;
    /**
     * @generated from protobuf field: optional int32 page_size = 2;
     */
    pageSize?: number;
    /**
     * @generated from protobuf field: optional string keyword = 3;
     */
    keyword?: string;
}
/**
 * @generated from protobuf message api_wireguard.ListNetworksResponse
 */
export interface ListNetworksResponse {
    /**
     * @generated from protobuf field: optional common.Status status = 1;
     */
    status?: Status;
    /**
     * @generated from protobuf field: optional int32 total = 2;
     */
    total?: number;
    /**
     * @generated from protobuf field: repeated wireguard.Network networks = 3;
     */
    networks: Network[];
}
/**
 * @generated from protobuf message api_wireguard.GetNetworkTopologyRequest
 */
export interface GetNetworkTopologyRequest {
    /**
     * @generated from protobuf field: optional uint32 id = 1;
     */
    id?: number;
}
/**
 * @generated from protobuf message api_wireguard.GetNetworkTopologyResponse
 */
export interface GetNetworkTopologyResponse {
    /**
     * @generated from protobuf field: optional common.Status status = 1;
     */
    status?: Status;
    /**
     * @generated from protobuf field: map<uint32, wireguard.WireGuardLinks> adjs = 2;
     */
    adjs: {
        [key: number]: WireGuardLinks;
    };
}
/**
 * @generated from protobuf message api_wireguard.CreateEndpointRequest
 */
export interface CreateEndpointRequest {
    /**
     * @generated from protobuf field: optional wireguard.Endpoint endpoint = 1;
     */
    endpoint?: Endpoint;
}
/**
 * @generated from protobuf message api_wireguard.CreateEndpointResponse
 */
export interface CreateEndpointResponse {
    /**
     * @generated from protobuf field: optional common.Status status = 1;
     */
    status?: Status;
    /**
     * @generated from protobuf field: optional wireguard.Endpoint endpoint = 2;
     */
    endpoint?: Endpoint;
}
/**
 * @generated from protobuf message api_wireguard.DeleteEndpointRequest
 */
export interface DeleteEndpointRequest {
    /**
     * @generated from protobuf field: optional uint32 id = 1;
     */
    id?: number;
}
/**
 * @generated from protobuf message api_wireguard.DeleteEndpointResponse
 */
export interface DeleteEndpointResponse {
    /**
     * @generated from protobuf field: optional common.Status status = 1;
     */
    status?: Status;
}
/**
 * @generated from protobuf message api_wireguard.UpdateEndpointRequest
 */
export interface UpdateEndpointRequest {
    /**
     * @generated from protobuf field: optional wireguard.Endpoint endpoint = 1;
     */
    endpoint?: Endpoint;
}
/**
 * @generated from protobuf message api_wireguard.UpdateEndpointResponse
 */
export interface UpdateEndpointResponse {
    /**
     * @generated from protobuf field: optional common.Status status = 1;
     */
    status?: Status;
    /**
     * @generated from protobuf field: optional wireguard.Endpoint endpoint = 2;
     */
    endpoint?: Endpoint;
}
/**
 * @generated from protobuf message api_wireguard.GetEndpointRequest
 */
export interface GetEndpointRequest {
    /**
     * @generated from protobuf field: optional uint32 id = 1;
     */
    id?: number;
}
/**
 * @generated from protobuf message api_wireguard.GetEndpointResponse
 */
export interface GetEndpointResponse {
    /**
     * @generated from protobuf field: optional common.Status status = 1;
     */
    status?: Status;
    /**
     * @generated from protobuf field: optional wireguard.Endpoint endpoint = 2;
     */
    endpoint?: Endpoint;
}
/**
 * @generated from protobuf message api_wireguard.ListEndpointsRequest
 */
export interface ListEndpointsRequest {
    /**
     * @generated from protobuf field: optional int32 page = 1;
     */
    page?: number;
    /**
     * @generated from protobuf field: optional int32 page_size = 2;
     */
    pageSize?: number;
    /**
     * @generated from protobuf field: optional string keyword = 3;
     */
    keyword?: string;
    /**
     * @generated from protobuf field: optional string client_id = 4;
     */
    clientId?: string;
    /**
     * @generated from protobuf field: optional uint32 wireguard_id = 5;
     */
    wireguardId?: number;
}
/**
 * @generated from protobuf message api_wireguard.ListEndpointsResponse
 */
export interface ListEndpointsResponse {
    /**
     * @generated from protobuf field: optional common.Status status = 1;
     */
    status?: Status;
    /**
     * @generated from protobuf field: optional int32 total = 2;
     */
    total?: number;
    /**
     * @generated from protobuf field: repeated wireguard.Endpoint endpoints = 3;
     */
    endpoints: Endpoint[];
}
/**
 * @generated from protobuf message api_wireguard.CreateWireGuardRequest
 */
export interface CreateWireGuardRequest {
    /**
     * @generated from protobuf field: optional wireguard.WireGuardConfig wireguard_config = 1;
     */
    wireguardConfig?: WireGuardConfig;
}
/**
 * @generated from protobuf message api_wireguard.CreateWireGuardResponse
 */
export interface CreateWireGuardResponse {
    /**
     * @generated from protobuf field: optional common.Status status = 1;
     */
    status?: Status;
    /**
     * @generated from protobuf field: optional wireguard.WireGuardConfig wireguard_config = 2;
     */
    wireguardConfig?: WireGuardConfig;
}
/**
 * @generated from protobuf message api_wireguard.DeleteWireGuardRequest
 */
export interface DeleteWireGuardRequest {
    /**
     * @generated from protobuf field: optional uint32 id = 1;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional string client_id = 2;
     */
    clientId?: string;
    /**
     * @generated from protobuf field: optional string interface_name = 3;
     */
    interfaceName?: string;
}
/**
 * @generated from protobuf message api_wireguard.DeleteWireGuardResponse
 */
export interface DeleteWireGuardResponse {
    /**
     * @generated from protobuf field: optional common.Status status = 1;
     */
    status?: Status;
}
/**
 * @generated from protobuf message api_wireguard.UpdateWireGuardRequest
 */
export interface UpdateWireGuardRequest {
    /**
     * @generated from protobuf field: optional wireguard.WireGuardConfig wireguard_config = 1;
     */
    wireguardConfig?: WireGuardConfig;
    /**
     * @generated from protobuf field: optional api_wireguard.UpdateWireGuardRequest.UpdateType update_type = 2;
     */
    updateType?: UpdateWireGuardRequest_UpdateType;
}
/**
 * @generated from protobuf enum api_wireguard.UpdateWireGuardRequest.UpdateType
 */
export enum UpdateWireGuardRequest_UpdateType {
    /**
     * @generated from protobuf enum value: UPDATE_TYPE_ADD_PEER = 0;
     */
    ADD_PEER = 0,
    /**
     * @generated from protobuf enum value: UPDATE_TYPE_REMOVE_PEER = 1;
     */
    REMOVE_PEER = 1,
    /**
     * @generated from protobuf enum value: UPDATE_TYPE_UPDATE_PEER = 2;
     */
    UPDATE_PEER = 2,
    /**
     * @generated from protobuf enum value: UPDATE_TYPE_PATCH_PEERS = 3;
     */
    PATCH_PEERS = 3
}
/**
 * @generated from protobuf message api_wireguard.UpdateWireGuardResponse
 */
export interface UpdateWireGuardResponse {
    /**
     * @generated from protobuf field: optional common.Status status = 1;
     */
    status?: Status;
    /**
     * @generated from protobuf field: optional wireguard.WireGuardConfig wireguard_config = 2;
     */
    wireguardConfig?: WireGuardConfig;
}
/**
 * @generated from protobuf message api_wireguard.GetWireGuardRequest
 */
export interface GetWireGuardRequest {
    /**
     * @generated from protobuf field: optional uint32 id = 1;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional string client_id = 2;
     */
    clientId?: string;
    /**
     * @generated from protobuf field: optional string interface_name = 3;
     */
    interfaceName?: string;
}
/**
 * @generated from protobuf message api_wireguard.GetWireGuardResponse
 */
export interface GetWireGuardResponse {
    /**
     * @generated from protobuf field: optional common.Status status = 1;
     */
    status?: Status;
    /**
     * @generated from protobuf field: optional wireguard.WireGuardConfig wireguard_config = 2;
     */
    wireguardConfig?: WireGuardConfig;
}
/**
 * @generated from protobuf message api_wireguard.GetWireGuardRuntimeInfoRequest
 */
export interface GetWireGuardRuntimeInfoRequest {
    /**
     * @generated from protobuf field: optional uint32 id = 1;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional string client_id = 2;
     */
    clientId?: string;
    /**
     * @generated from protobuf field: optional string interface_name = 3;
     */
    interfaceName?: string;
}
/**
 * @generated from protobuf message api_wireguard.GetWireGuardRuntimeInfoResponse
 */
export interface GetWireGuardRuntimeInfoResponse {
    /**
     * @generated from protobuf field: optional common.Status status = 1;
     */
    status?: Status;
    /**
     * @generated from protobuf field: optional wireguard.WGDeviceRuntimeInfo wg_device_runtime_info = 2;
     */
    wgDeviceRuntimeInfo?: WGDeviceRuntimeInfo;
}
/**
 * @generated from protobuf message api_wireguard.ListWireGuardsRequest
 */
export interface ListWireGuardsRequest {
    /**
     * @generated from protobuf field: optional int32 page = 1;
     */
    page?: number;
    /**
     * @generated from protobuf field: optional int32 page_size = 2;
     */
    pageSize?: number;
    /**
     * @generated from protobuf field: optional string keyword = 3;
     */
    keyword?: string;
    /**
     * @generated from protobuf field: optional string client_id = 4;
     */
    clientId?: string;
    /**
     * @generated from protobuf field: optional uint32 network_id = 5;
     */
    networkId?: number;
}
/**
 * @generated from protobuf message api_wireguard.ListWireGuardsResponse
 */
export interface ListWireGuardsResponse {
    /**
     * @generated from protobuf field: optional common.Status status = 1;
     */
    status?: Status;
    /**
     * @generated from protobuf field: optional int32 total = 2;
     */
    total?: number;
    /**
     * @generated from protobuf field: repeated wireguard.WireGuardConfig wireguard_configs = 3;
     */
    wireguardConfigs: WireGuardConfig[];
}
/**
 * @generated from protobuf message api_wireguard.CreateWireGuardLinkRequest
 */
export interface CreateWireGuardLinkRequest {
    /**
     * @generated from protobuf field: optional wireguard.WireGuardLink wireguard_link = 1;
     */
    wireguardLink?: WireGuardLink;
}
/**
 * @generated from protobuf message api_wireguard.CreateWireGuardLinkResponse
 */
export interface CreateWireGuardLinkResponse {
    /**
     * @generated from protobuf field: optional common.Status status = 1;
     */
    status?: Status;
    /**
     * @generated from protobuf field: optional wireguard.WireGuardLink wireguard_link = 2;
     */
    wireguardLink?: WireGuardLink;
}
/**
 * @generated from protobuf message api_wireguard.DeleteWireGuardLinkRequest
 */
export interface DeleteWireGuardLinkRequest {
    /**
     * @generated from protobuf field: optional uint32 id = 1;
     */
    id?: number;
}
/**
 * @generated from protobuf message api_wireguard.DeleteWireGuardLinkResponse
 */
export interface DeleteWireGuardLinkResponse {
    /**
     * @generated from protobuf field: optional common.Status status = 1;
     */
    status?: Status;
}
/**
 * @generated from protobuf message api_wireguard.UpdateWireGuardLinkRequest
 */
export interface UpdateWireGuardLinkRequest {
    /**
     * @generated from protobuf field: optional wireguard.WireGuardLink wireguard_link = 1;
     */
    wireguardLink?: WireGuardLink;
}
/**
 * @generated from protobuf message api_wireguard.UpdateWireGuardLinkResponse
 */
export interface UpdateWireGuardLinkResponse {
    /**
     * @generated from protobuf field: optional common.Status status = 1;
     */
    status?: Status;
    /**
     * @generated from protobuf field: optional wireguard.WireGuardLink wireguard_link = 2;
     */
    wireguardLink?: WireGuardLink;
}
/**
 * @generated from protobuf message api_wireguard.GetWireGuardLinkRequest
 */
export interface GetWireGuardLinkRequest {
    /**
     * @generated from protobuf field: optional uint32 id = 1;
     */
    id?: number;
}
/**
 * @generated from protobuf message api_wireguard.GetWireGuardLinkResponse
 */
export interface GetWireGuardLinkResponse {
    /**
     * @generated from protobuf field: optional common.Status status = 1;
     */
    status?: Status;
    /**
     * @generated from protobuf field: optional wireguard.WireGuardLink wireguard_link = 2;
     */
    wireguardLink?: WireGuardLink;
}
/**
 * @generated from protobuf message api_wireguard.ListWireGuardLinksRequest
 */
export interface ListWireGuardLinksRequest {
    /**
     * @generated from protobuf field: optional int32 page = 1;
     */
    page?: number;
    /**
     * @generated from protobuf field: optional int32 page_size = 2;
     */
    pageSize?: number;
    /**
     * @generated from protobuf field: optional string keyword = 3;
     */
    keyword?: string;
    /**
     * @generated from protobuf field: optional uint32 network_id = 4;
     */
    networkId?: number;
}
/**
 * @generated from protobuf message api_wireguard.ListWireGuardLinksResponse
 */
export interface ListWireGuardLinksResponse {
    /**
     * @generated from protobuf field: optional common.Status status = 1;
     */
    status?: Status;
    /**
     * @generated from protobuf field: optional int32 total = 2;
     */
    total?: number;
    /**
     * @generated from protobuf field: repeated wireguard.WireGuardLink wireguard_links = 3;
     */
    wireguardLinks: WireGuardLink[];
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateNetworkRequest$Type extends MessageType<CreateNetworkRequest> {
    constructor() {
        super("api_wireguard.CreateNetworkRequest", [
            { no: 1, name: "network", kind: "message", T: () => Network }
        ]);
    }
    create(value?: PartialMessage<CreateNetworkRequest>): CreateNetworkRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateNetworkRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateNetworkRequest): CreateNetworkRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional wireguard.Network network */ 1:
                    message.network = Network.internalBinaryRead(reader, reader.uint32(), options, message.network);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateNetworkRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional wireguard.Network network = 1; */
        if (message.network)
            Network.internalBinaryWrite(message.network, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.CreateNetworkRequest
 */
export const CreateNetworkRequest = new CreateNetworkRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateNetworkResponse$Type extends MessageType<CreateNetworkResponse> {
    constructor() {
        super("api_wireguard.CreateNetworkResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status },
            { no: 2, name: "network", kind: "message", T: () => Network }
        ]);
    }
    create(value?: PartialMessage<CreateNetworkResponse>): CreateNetworkResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateNetworkResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateNetworkResponse): CreateNetworkResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional common.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* optional wireguard.Network network */ 2:
                    message.network = Network.internalBinaryRead(reader, reader.uint32(), options, message.network);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateNetworkResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional common.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional wireguard.Network network = 2; */
        if (message.network)
            Network.internalBinaryWrite(message.network, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.CreateNetworkResponse
 */
export const CreateNetworkResponse = new CreateNetworkResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteNetworkRequest$Type extends MessageType<DeleteNetworkRequest> {
    constructor() {
        super("api_wireguard.DeleteNetworkRequest", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteNetworkRequest>): DeleteNetworkRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteNetworkRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteNetworkRequest): DeleteNetworkRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteNetworkRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.DeleteNetworkRequest
 */
export const DeleteNetworkRequest = new DeleteNetworkRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteNetworkResponse$Type extends MessageType<DeleteNetworkResponse> {
    constructor() {
        super("api_wireguard.DeleteNetworkResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status }
        ]);
    }
    create(value?: PartialMessage<DeleteNetworkResponse>): DeleteNetworkResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteNetworkResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteNetworkResponse): DeleteNetworkResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional common.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteNetworkResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional common.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.DeleteNetworkResponse
 */
export const DeleteNetworkResponse = new DeleteNetworkResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateNetworkRequest$Type extends MessageType<UpdateNetworkRequest> {
    constructor() {
        super("api_wireguard.UpdateNetworkRequest", [
            { no: 1, name: "network", kind: "message", T: () => Network }
        ]);
    }
    create(value?: PartialMessage<UpdateNetworkRequest>): UpdateNetworkRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateNetworkRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateNetworkRequest): UpdateNetworkRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional wireguard.Network network */ 1:
                    message.network = Network.internalBinaryRead(reader, reader.uint32(), options, message.network);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateNetworkRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional wireguard.Network network = 1; */
        if (message.network)
            Network.internalBinaryWrite(message.network, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.UpdateNetworkRequest
 */
export const UpdateNetworkRequest = new UpdateNetworkRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateNetworkResponse$Type extends MessageType<UpdateNetworkResponse> {
    constructor() {
        super("api_wireguard.UpdateNetworkResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status },
            { no: 2, name: "network", kind: "message", T: () => Network }
        ]);
    }
    create(value?: PartialMessage<UpdateNetworkResponse>): UpdateNetworkResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateNetworkResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateNetworkResponse): UpdateNetworkResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional common.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* optional wireguard.Network network */ 2:
                    message.network = Network.internalBinaryRead(reader, reader.uint32(), options, message.network);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateNetworkResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional common.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional wireguard.Network network = 2; */
        if (message.network)
            Network.internalBinaryWrite(message.network, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.UpdateNetworkResponse
 */
export const UpdateNetworkResponse = new UpdateNetworkResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetNetworkRequest$Type extends MessageType<GetNetworkRequest> {
    constructor() {
        super("api_wireguard.GetNetworkRequest", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetNetworkRequest>): GetNetworkRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetNetworkRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetNetworkRequest): GetNetworkRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetNetworkRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.GetNetworkRequest
 */
export const GetNetworkRequest = new GetNetworkRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetNetworkResponse$Type extends MessageType<GetNetworkResponse> {
    constructor() {
        super("api_wireguard.GetNetworkResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status },
            { no: 2, name: "network", kind: "message", T: () => Network }
        ]);
    }
    create(value?: PartialMessage<GetNetworkResponse>): GetNetworkResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetNetworkResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetNetworkResponse): GetNetworkResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional common.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* optional wireguard.Network network */ 2:
                    message.network = Network.internalBinaryRead(reader, reader.uint32(), options, message.network);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetNetworkResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional common.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional wireguard.Network network = 2; */
        if (message.network)
            Network.internalBinaryWrite(message.network, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.GetNetworkResponse
 */
export const GetNetworkResponse = new GetNetworkResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListNetworksRequest$Type extends MessageType<ListNetworksRequest> {
    constructor() {
        super("api_wireguard.ListNetworksRequest", [
            { no: 1, name: "page", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "page_size", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "keyword", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListNetworksRequest>): ListNetworksRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListNetworksRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListNetworksRequest): ListNetworksRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 page */ 1:
                    message.page = reader.int32();
                    break;
                case /* optional int32 page_size */ 2:
                    message.pageSize = reader.int32();
                    break;
                case /* optional string keyword */ 3:
                    message.keyword = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListNetworksRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 page = 1; */
        if (message.page !== undefined)
            writer.tag(1, WireType.Varint).int32(message.page);
        /* optional int32 page_size = 2; */
        if (message.pageSize !== undefined)
            writer.tag(2, WireType.Varint).int32(message.pageSize);
        /* optional string keyword = 3; */
        if (message.keyword !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.keyword);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.ListNetworksRequest
 */
export const ListNetworksRequest = new ListNetworksRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListNetworksResponse$Type extends MessageType<ListNetworksResponse> {
    constructor() {
        super("api_wireguard.ListNetworksResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status },
            { no: 2, name: "total", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "networks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Network }
        ]);
    }
    create(value?: PartialMessage<ListNetworksResponse>): ListNetworksResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.networks = [];
        if (value !== undefined)
            reflectionMergePartial<ListNetworksResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListNetworksResponse): ListNetworksResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional common.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* optional int32 total */ 2:
                    message.total = reader.int32();
                    break;
                case /* repeated wireguard.Network networks */ 3:
                    message.networks.push(Network.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListNetworksResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional common.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 total = 2; */
        if (message.total !== undefined)
            writer.tag(2, WireType.Varint).int32(message.total);
        /* repeated wireguard.Network networks = 3; */
        for (let i = 0; i < message.networks.length; i++)
            Network.internalBinaryWrite(message.networks[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.ListNetworksResponse
 */
export const ListNetworksResponse = new ListNetworksResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetNetworkTopologyRequest$Type extends MessageType<GetNetworkTopologyRequest> {
    constructor() {
        super("api_wireguard.GetNetworkTopologyRequest", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetNetworkTopologyRequest>): GetNetworkTopologyRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetNetworkTopologyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetNetworkTopologyRequest): GetNetworkTopologyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetNetworkTopologyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.GetNetworkTopologyRequest
 */
export const GetNetworkTopologyRequest = new GetNetworkTopologyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetNetworkTopologyResponse$Type extends MessageType<GetNetworkTopologyResponse> {
    constructor() {
        super("api_wireguard.GetNetworkTopologyResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status },
            { no: 2, name: "adjs", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => WireGuardLinks } }
        ]);
    }
    create(value?: PartialMessage<GetNetworkTopologyResponse>): GetNetworkTopologyResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.adjs = {};
        if (value !== undefined)
            reflectionMergePartial<GetNetworkTopologyResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetNetworkTopologyResponse): GetNetworkTopologyResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional common.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* map<uint32, wireguard.WireGuardLinks> adjs */ 2:
                    this.binaryReadMap2(message.adjs, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: GetNetworkTopologyResponse["adjs"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GetNetworkTopologyResponse["adjs"] | undefined, val: GetNetworkTopologyResponse["adjs"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = WireGuardLinks.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field api_wireguard.GetNetworkTopologyResponse.adjs");
            }
        }
        map[key ?? 0] = val ?? WireGuardLinks.create();
    }
    internalBinaryWrite(message: GetNetworkTopologyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional common.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* map<uint32, wireguard.WireGuardLinks> adjs = 2; */
        for (let k of globalThis.Object.keys(message.adjs)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            WireGuardLinks.internalBinaryWrite(message.adjs[k as any], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.GetNetworkTopologyResponse
 */
export const GetNetworkTopologyResponse = new GetNetworkTopologyResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateEndpointRequest$Type extends MessageType<CreateEndpointRequest> {
    constructor() {
        super("api_wireguard.CreateEndpointRequest", [
            { no: 1, name: "endpoint", kind: "message", T: () => Endpoint }
        ]);
    }
    create(value?: PartialMessage<CreateEndpointRequest>): CreateEndpointRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateEndpointRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateEndpointRequest): CreateEndpointRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional wireguard.Endpoint endpoint */ 1:
                    message.endpoint = Endpoint.internalBinaryRead(reader, reader.uint32(), options, message.endpoint);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateEndpointRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional wireguard.Endpoint endpoint = 1; */
        if (message.endpoint)
            Endpoint.internalBinaryWrite(message.endpoint, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.CreateEndpointRequest
 */
export const CreateEndpointRequest = new CreateEndpointRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateEndpointResponse$Type extends MessageType<CreateEndpointResponse> {
    constructor() {
        super("api_wireguard.CreateEndpointResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status },
            { no: 2, name: "endpoint", kind: "message", T: () => Endpoint }
        ]);
    }
    create(value?: PartialMessage<CreateEndpointResponse>): CreateEndpointResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateEndpointResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateEndpointResponse): CreateEndpointResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional common.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* optional wireguard.Endpoint endpoint */ 2:
                    message.endpoint = Endpoint.internalBinaryRead(reader, reader.uint32(), options, message.endpoint);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateEndpointResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional common.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional wireguard.Endpoint endpoint = 2; */
        if (message.endpoint)
            Endpoint.internalBinaryWrite(message.endpoint, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.CreateEndpointResponse
 */
export const CreateEndpointResponse = new CreateEndpointResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteEndpointRequest$Type extends MessageType<DeleteEndpointRequest> {
    constructor() {
        super("api_wireguard.DeleteEndpointRequest", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteEndpointRequest>): DeleteEndpointRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteEndpointRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteEndpointRequest): DeleteEndpointRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteEndpointRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.DeleteEndpointRequest
 */
export const DeleteEndpointRequest = new DeleteEndpointRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteEndpointResponse$Type extends MessageType<DeleteEndpointResponse> {
    constructor() {
        super("api_wireguard.DeleteEndpointResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status }
        ]);
    }
    create(value?: PartialMessage<DeleteEndpointResponse>): DeleteEndpointResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteEndpointResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteEndpointResponse): DeleteEndpointResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional common.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteEndpointResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional common.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.DeleteEndpointResponse
 */
export const DeleteEndpointResponse = new DeleteEndpointResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateEndpointRequest$Type extends MessageType<UpdateEndpointRequest> {
    constructor() {
        super("api_wireguard.UpdateEndpointRequest", [
            { no: 1, name: "endpoint", kind: "message", T: () => Endpoint }
        ]);
    }
    create(value?: PartialMessage<UpdateEndpointRequest>): UpdateEndpointRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateEndpointRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateEndpointRequest): UpdateEndpointRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional wireguard.Endpoint endpoint */ 1:
                    message.endpoint = Endpoint.internalBinaryRead(reader, reader.uint32(), options, message.endpoint);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateEndpointRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional wireguard.Endpoint endpoint = 1; */
        if (message.endpoint)
            Endpoint.internalBinaryWrite(message.endpoint, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.UpdateEndpointRequest
 */
export const UpdateEndpointRequest = new UpdateEndpointRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateEndpointResponse$Type extends MessageType<UpdateEndpointResponse> {
    constructor() {
        super("api_wireguard.UpdateEndpointResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status },
            { no: 2, name: "endpoint", kind: "message", T: () => Endpoint }
        ]);
    }
    create(value?: PartialMessage<UpdateEndpointResponse>): UpdateEndpointResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateEndpointResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateEndpointResponse): UpdateEndpointResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional common.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* optional wireguard.Endpoint endpoint */ 2:
                    message.endpoint = Endpoint.internalBinaryRead(reader, reader.uint32(), options, message.endpoint);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateEndpointResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional common.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional wireguard.Endpoint endpoint = 2; */
        if (message.endpoint)
            Endpoint.internalBinaryWrite(message.endpoint, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.UpdateEndpointResponse
 */
export const UpdateEndpointResponse = new UpdateEndpointResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetEndpointRequest$Type extends MessageType<GetEndpointRequest> {
    constructor() {
        super("api_wireguard.GetEndpointRequest", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetEndpointRequest>): GetEndpointRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetEndpointRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetEndpointRequest): GetEndpointRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetEndpointRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.GetEndpointRequest
 */
export const GetEndpointRequest = new GetEndpointRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetEndpointResponse$Type extends MessageType<GetEndpointResponse> {
    constructor() {
        super("api_wireguard.GetEndpointResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status },
            { no: 2, name: "endpoint", kind: "message", T: () => Endpoint }
        ]);
    }
    create(value?: PartialMessage<GetEndpointResponse>): GetEndpointResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetEndpointResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetEndpointResponse): GetEndpointResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional common.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* optional wireguard.Endpoint endpoint */ 2:
                    message.endpoint = Endpoint.internalBinaryRead(reader, reader.uint32(), options, message.endpoint);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetEndpointResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional common.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional wireguard.Endpoint endpoint = 2; */
        if (message.endpoint)
            Endpoint.internalBinaryWrite(message.endpoint, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.GetEndpointResponse
 */
export const GetEndpointResponse = new GetEndpointResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListEndpointsRequest$Type extends MessageType<ListEndpointsRequest> {
    constructor() {
        super("api_wireguard.ListEndpointsRequest", [
            { no: 1, name: "page", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "page_size", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "keyword", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "client_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "wireguard_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ListEndpointsRequest>): ListEndpointsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListEndpointsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListEndpointsRequest): ListEndpointsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 page */ 1:
                    message.page = reader.int32();
                    break;
                case /* optional int32 page_size */ 2:
                    message.pageSize = reader.int32();
                    break;
                case /* optional string keyword */ 3:
                    message.keyword = reader.string();
                    break;
                case /* optional string client_id */ 4:
                    message.clientId = reader.string();
                    break;
                case /* optional uint32 wireguard_id */ 5:
                    message.wireguardId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListEndpointsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 page = 1; */
        if (message.page !== undefined)
            writer.tag(1, WireType.Varint).int32(message.page);
        /* optional int32 page_size = 2; */
        if (message.pageSize !== undefined)
            writer.tag(2, WireType.Varint).int32(message.pageSize);
        /* optional string keyword = 3; */
        if (message.keyword !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.keyword);
        /* optional string client_id = 4; */
        if (message.clientId !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.clientId);
        /* optional uint32 wireguard_id = 5; */
        if (message.wireguardId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.wireguardId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.ListEndpointsRequest
 */
export const ListEndpointsRequest = new ListEndpointsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListEndpointsResponse$Type extends MessageType<ListEndpointsResponse> {
    constructor() {
        super("api_wireguard.ListEndpointsResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status },
            { no: 2, name: "total", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "endpoints", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Endpoint }
        ]);
    }
    create(value?: PartialMessage<ListEndpointsResponse>): ListEndpointsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.endpoints = [];
        if (value !== undefined)
            reflectionMergePartial<ListEndpointsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListEndpointsResponse): ListEndpointsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional common.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* optional int32 total */ 2:
                    message.total = reader.int32();
                    break;
                case /* repeated wireguard.Endpoint endpoints */ 3:
                    message.endpoints.push(Endpoint.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListEndpointsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional common.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 total = 2; */
        if (message.total !== undefined)
            writer.tag(2, WireType.Varint).int32(message.total);
        /* repeated wireguard.Endpoint endpoints = 3; */
        for (let i = 0; i < message.endpoints.length; i++)
            Endpoint.internalBinaryWrite(message.endpoints[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.ListEndpointsResponse
 */
export const ListEndpointsResponse = new ListEndpointsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateWireGuardRequest$Type extends MessageType<CreateWireGuardRequest> {
    constructor() {
        super("api_wireguard.CreateWireGuardRequest", [
            { no: 1, name: "wireguard_config", kind: "message", T: () => WireGuardConfig }
        ]);
    }
    create(value?: PartialMessage<CreateWireGuardRequest>): CreateWireGuardRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateWireGuardRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateWireGuardRequest): CreateWireGuardRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional wireguard.WireGuardConfig wireguard_config */ 1:
                    message.wireguardConfig = WireGuardConfig.internalBinaryRead(reader, reader.uint32(), options, message.wireguardConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateWireGuardRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional wireguard.WireGuardConfig wireguard_config = 1; */
        if (message.wireguardConfig)
            WireGuardConfig.internalBinaryWrite(message.wireguardConfig, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.CreateWireGuardRequest
 */
export const CreateWireGuardRequest = new CreateWireGuardRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateWireGuardResponse$Type extends MessageType<CreateWireGuardResponse> {
    constructor() {
        super("api_wireguard.CreateWireGuardResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status },
            { no: 2, name: "wireguard_config", kind: "message", T: () => WireGuardConfig }
        ]);
    }
    create(value?: PartialMessage<CreateWireGuardResponse>): CreateWireGuardResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateWireGuardResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateWireGuardResponse): CreateWireGuardResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional common.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* optional wireguard.WireGuardConfig wireguard_config */ 2:
                    message.wireguardConfig = WireGuardConfig.internalBinaryRead(reader, reader.uint32(), options, message.wireguardConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateWireGuardResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional common.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional wireguard.WireGuardConfig wireguard_config = 2; */
        if (message.wireguardConfig)
            WireGuardConfig.internalBinaryWrite(message.wireguardConfig, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.CreateWireGuardResponse
 */
export const CreateWireGuardResponse = new CreateWireGuardResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteWireGuardRequest$Type extends MessageType<DeleteWireGuardRequest> {
    constructor() {
        super("api_wireguard.DeleteWireGuardRequest", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "client_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "interface_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteWireGuardRequest>): DeleteWireGuardRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteWireGuardRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteWireGuardRequest): DeleteWireGuardRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* optional string client_id */ 2:
                    message.clientId = reader.string();
                    break;
                case /* optional string interface_name */ 3:
                    message.interfaceName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteWireGuardRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* optional string client_id = 2; */
        if (message.clientId !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.clientId);
        /* optional string interface_name = 3; */
        if (message.interfaceName !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.interfaceName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.DeleteWireGuardRequest
 */
export const DeleteWireGuardRequest = new DeleteWireGuardRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteWireGuardResponse$Type extends MessageType<DeleteWireGuardResponse> {
    constructor() {
        super("api_wireguard.DeleteWireGuardResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status }
        ]);
    }
    create(value?: PartialMessage<DeleteWireGuardResponse>): DeleteWireGuardResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteWireGuardResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteWireGuardResponse): DeleteWireGuardResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional common.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteWireGuardResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional common.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.DeleteWireGuardResponse
 */
export const DeleteWireGuardResponse = new DeleteWireGuardResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateWireGuardRequest$Type extends MessageType<UpdateWireGuardRequest> {
    constructor() {
        super("api_wireguard.UpdateWireGuardRequest", [
            { no: 1, name: "wireguard_config", kind: "message", T: () => WireGuardConfig },
            { no: 2, name: "update_type", kind: "enum", opt: true, T: () => ["api_wireguard.UpdateWireGuardRequest.UpdateType", UpdateWireGuardRequest_UpdateType, "UPDATE_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<UpdateWireGuardRequest>): UpdateWireGuardRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateWireGuardRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateWireGuardRequest): UpdateWireGuardRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional wireguard.WireGuardConfig wireguard_config */ 1:
                    message.wireguardConfig = WireGuardConfig.internalBinaryRead(reader, reader.uint32(), options, message.wireguardConfig);
                    break;
                case /* optional api_wireguard.UpdateWireGuardRequest.UpdateType update_type */ 2:
                    message.updateType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateWireGuardRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional wireguard.WireGuardConfig wireguard_config = 1; */
        if (message.wireguardConfig)
            WireGuardConfig.internalBinaryWrite(message.wireguardConfig, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional api_wireguard.UpdateWireGuardRequest.UpdateType update_type = 2; */
        if (message.updateType !== undefined)
            writer.tag(2, WireType.Varint).int32(message.updateType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.UpdateWireGuardRequest
 */
export const UpdateWireGuardRequest = new UpdateWireGuardRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateWireGuardResponse$Type extends MessageType<UpdateWireGuardResponse> {
    constructor() {
        super("api_wireguard.UpdateWireGuardResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status },
            { no: 2, name: "wireguard_config", kind: "message", T: () => WireGuardConfig }
        ]);
    }
    create(value?: PartialMessage<UpdateWireGuardResponse>): UpdateWireGuardResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateWireGuardResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateWireGuardResponse): UpdateWireGuardResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional common.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* optional wireguard.WireGuardConfig wireguard_config */ 2:
                    message.wireguardConfig = WireGuardConfig.internalBinaryRead(reader, reader.uint32(), options, message.wireguardConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateWireGuardResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional common.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional wireguard.WireGuardConfig wireguard_config = 2; */
        if (message.wireguardConfig)
            WireGuardConfig.internalBinaryWrite(message.wireguardConfig, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.UpdateWireGuardResponse
 */
export const UpdateWireGuardResponse = new UpdateWireGuardResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetWireGuardRequest$Type extends MessageType<GetWireGuardRequest> {
    constructor() {
        super("api_wireguard.GetWireGuardRequest", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "client_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "interface_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetWireGuardRequest>): GetWireGuardRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetWireGuardRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetWireGuardRequest): GetWireGuardRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* optional string client_id */ 2:
                    message.clientId = reader.string();
                    break;
                case /* optional string interface_name */ 3:
                    message.interfaceName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetWireGuardRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* optional string client_id = 2; */
        if (message.clientId !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.clientId);
        /* optional string interface_name = 3; */
        if (message.interfaceName !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.interfaceName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.GetWireGuardRequest
 */
export const GetWireGuardRequest = new GetWireGuardRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetWireGuardResponse$Type extends MessageType<GetWireGuardResponse> {
    constructor() {
        super("api_wireguard.GetWireGuardResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status },
            { no: 2, name: "wireguard_config", kind: "message", T: () => WireGuardConfig }
        ]);
    }
    create(value?: PartialMessage<GetWireGuardResponse>): GetWireGuardResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetWireGuardResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetWireGuardResponse): GetWireGuardResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional common.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* optional wireguard.WireGuardConfig wireguard_config */ 2:
                    message.wireguardConfig = WireGuardConfig.internalBinaryRead(reader, reader.uint32(), options, message.wireguardConfig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetWireGuardResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional common.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional wireguard.WireGuardConfig wireguard_config = 2; */
        if (message.wireguardConfig)
            WireGuardConfig.internalBinaryWrite(message.wireguardConfig, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.GetWireGuardResponse
 */
export const GetWireGuardResponse = new GetWireGuardResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetWireGuardRuntimeInfoRequest$Type extends MessageType<GetWireGuardRuntimeInfoRequest> {
    constructor() {
        super("api_wireguard.GetWireGuardRuntimeInfoRequest", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "client_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "interface_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetWireGuardRuntimeInfoRequest>): GetWireGuardRuntimeInfoRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetWireGuardRuntimeInfoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetWireGuardRuntimeInfoRequest): GetWireGuardRuntimeInfoRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* optional string client_id */ 2:
                    message.clientId = reader.string();
                    break;
                case /* optional string interface_name */ 3:
                    message.interfaceName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetWireGuardRuntimeInfoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* optional string client_id = 2; */
        if (message.clientId !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.clientId);
        /* optional string interface_name = 3; */
        if (message.interfaceName !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.interfaceName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.GetWireGuardRuntimeInfoRequest
 */
export const GetWireGuardRuntimeInfoRequest = new GetWireGuardRuntimeInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetWireGuardRuntimeInfoResponse$Type extends MessageType<GetWireGuardRuntimeInfoResponse> {
    constructor() {
        super("api_wireguard.GetWireGuardRuntimeInfoResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status },
            { no: 2, name: "wg_device_runtime_info", kind: "message", T: () => WGDeviceRuntimeInfo }
        ]);
    }
    create(value?: PartialMessage<GetWireGuardRuntimeInfoResponse>): GetWireGuardRuntimeInfoResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetWireGuardRuntimeInfoResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetWireGuardRuntimeInfoResponse): GetWireGuardRuntimeInfoResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional common.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* optional wireguard.WGDeviceRuntimeInfo wg_device_runtime_info */ 2:
                    message.wgDeviceRuntimeInfo = WGDeviceRuntimeInfo.internalBinaryRead(reader, reader.uint32(), options, message.wgDeviceRuntimeInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetWireGuardRuntimeInfoResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional common.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional wireguard.WGDeviceRuntimeInfo wg_device_runtime_info = 2; */
        if (message.wgDeviceRuntimeInfo)
            WGDeviceRuntimeInfo.internalBinaryWrite(message.wgDeviceRuntimeInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.GetWireGuardRuntimeInfoResponse
 */
export const GetWireGuardRuntimeInfoResponse = new GetWireGuardRuntimeInfoResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListWireGuardsRequest$Type extends MessageType<ListWireGuardsRequest> {
    constructor() {
        super("api_wireguard.ListWireGuardsRequest", [
            { no: 1, name: "page", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "page_size", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "keyword", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "client_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "network_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ListWireGuardsRequest>): ListWireGuardsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListWireGuardsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListWireGuardsRequest): ListWireGuardsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 page */ 1:
                    message.page = reader.int32();
                    break;
                case /* optional int32 page_size */ 2:
                    message.pageSize = reader.int32();
                    break;
                case /* optional string keyword */ 3:
                    message.keyword = reader.string();
                    break;
                case /* optional string client_id */ 4:
                    message.clientId = reader.string();
                    break;
                case /* optional uint32 network_id */ 5:
                    message.networkId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListWireGuardsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 page = 1; */
        if (message.page !== undefined)
            writer.tag(1, WireType.Varint).int32(message.page);
        /* optional int32 page_size = 2; */
        if (message.pageSize !== undefined)
            writer.tag(2, WireType.Varint).int32(message.pageSize);
        /* optional string keyword = 3; */
        if (message.keyword !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.keyword);
        /* optional string client_id = 4; */
        if (message.clientId !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.clientId);
        /* optional uint32 network_id = 5; */
        if (message.networkId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.networkId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.ListWireGuardsRequest
 */
export const ListWireGuardsRequest = new ListWireGuardsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListWireGuardsResponse$Type extends MessageType<ListWireGuardsResponse> {
    constructor() {
        super("api_wireguard.ListWireGuardsResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status },
            { no: 2, name: "total", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "wireguard_configs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WireGuardConfig }
        ]);
    }
    create(value?: PartialMessage<ListWireGuardsResponse>): ListWireGuardsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.wireguardConfigs = [];
        if (value !== undefined)
            reflectionMergePartial<ListWireGuardsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListWireGuardsResponse): ListWireGuardsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional common.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* optional int32 total */ 2:
                    message.total = reader.int32();
                    break;
                case /* repeated wireguard.WireGuardConfig wireguard_configs */ 3:
                    message.wireguardConfigs.push(WireGuardConfig.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListWireGuardsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional common.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 total = 2; */
        if (message.total !== undefined)
            writer.tag(2, WireType.Varint).int32(message.total);
        /* repeated wireguard.WireGuardConfig wireguard_configs = 3; */
        for (let i = 0; i < message.wireguardConfigs.length; i++)
            WireGuardConfig.internalBinaryWrite(message.wireguardConfigs[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.ListWireGuardsResponse
 */
export const ListWireGuardsResponse = new ListWireGuardsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateWireGuardLinkRequest$Type extends MessageType<CreateWireGuardLinkRequest> {
    constructor() {
        super("api_wireguard.CreateWireGuardLinkRequest", [
            { no: 1, name: "wireguard_link", kind: "message", T: () => WireGuardLink }
        ]);
    }
    create(value?: PartialMessage<CreateWireGuardLinkRequest>): CreateWireGuardLinkRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateWireGuardLinkRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateWireGuardLinkRequest): CreateWireGuardLinkRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional wireguard.WireGuardLink wireguard_link */ 1:
                    message.wireguardLink = WireGuardLink.internalBinaryRead(reader, reader.uint32(), options, message.wireguardLink);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateWireGuardLinkRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional wireguard.WireGuardLink wireguard_link = 1; */
        if (message.wireguardLink)
            WireGuardLink.internalBinaryWrite(message.wireguardLink, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.CreateWireGuardLinkRequest
 */
export const CreateWireGuardLinkRequest = new CreateWireGuardLinkRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateWireGuardLinkResponse$Type extends MessageType<CreateWireGuardLinkResponse> {
    constructor() {
        super("api_wireguard.CreateWireGuardLinkResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status },
            { no: 2, name: "wireguard_link", kind: "message", T: () => WireGuardLink }
        ]);
    }
    create(value?: PartialMessage<CreateWireGuardLinkResponse>): CreateWireGuardLinkResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateWireGuardLinkResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateWireGuardLinkResponse): CreateWireGuardLinkResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional common.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* optional wireguard.WireGuardLink wireguard_link */ 2:
                    message.wireguardLink = WireGuardLink.internalBinaryRead(reader, reader.uint32(), options, message.wireguardLink);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateWireGuardLinkResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional common.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional wireguard.WireGuardLink wireguard_link = 2; */
        if (message.wireguardLink)
            WireGuardLink.internalBinaryWrite(message.wireguardLink, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.CreateWireGuardLinkResponse
 */
export const CreateWireGuardLinkResponse = new CreateWireGuardLinkResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteWireGuardLinkRequest$Type extends MessageType<DeleteWireGuardLinkRequest> {
    constructor() {
        super("api_wireguard.DeleteWireGuardLinkRequest", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteWireGuardLinkRequest>): DeleteWireGuardLinkRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteWireGuardLinkRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteWireGuardLinkRequest): DeleteWireGuardLinkRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteWireGuardLinkRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.DeleteWireGuardLinkRequest
 */
export const DeleteWireGuardLinkRequest = new DeleteWireGuardLinkRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteWireGuardLinkResponse$Type extends MessageType<DeleteWireGuardLinkResponse> {
    constructor() {
        super("api_wireguard.DeleteWireGuardLinkResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status }
        ]);
    }
    create(value?: PartialMessage<DeleteWireGuardLinkResponse>): DeleteWireGuardLinkResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteWireGuardLinkResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteWireGuardLinkResponse): DeleteWireGuardLinkResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional common.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteWireGuardLinkResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional common.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.DeleteWireGuardLinkResponse
 */
export const DeleteWireGuardLinkResponse = new DeleteWireGuardLinkResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateWireGuardLinkRequest$Type extends MessageType<UpdateWireGuardLinkRequest> {
    constructor() {
        super("api_wireguard.UpdateWireGuardLinkRequest", [
            { no: 1, name: "wireguard_link", kind: "message", T: () => WireGuardLink }
        ]);
    }
    create(value?: PartialMessage<UpdateWireGuardLinkRequest>): UpdateWireGuardLinkRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateWireGuardLinkRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateWireGuardLinkRequest): UpdateWireGuardLinkRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional wireguard.WireGuardLink wireguard_link */ 1:
                    message.wireguardLink = WireGuardLink.internalBinaryRead(reader, reader.uint32(), options, message.wireguardLink);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateWireGuardLinkRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional wireguard.WireGuardLink wireguard_link = 1; */
        if (message.wireguardLink)
            WireGuardLink.internalBinaryWrite(message.wireguardLink, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.UpdateWireGuardLinkRequest
 */
export const UpdateWireGuardLinkRequest = new UpdateWireGuardLinkRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateWireGuardLinkResponse$Type extends MessageType<UpdateWireGuardLinkResponse> {
    constructor() {
        super("api_wireguard.UpdateWireGuardLinkResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status },
            { no: 2, name: "wireguard_link", kind: "message", T: () => WireGuardLink }
        ]);
    }
    create(value?: PartialMessage<UpdateWireGuardLinkResponse>): UpdateWireGuardLinkResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateWireGuardLinkResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateWireGuardLinkResponse): UpdateWireGuardLinkResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional common.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* optional wireguard.WireGuardLink wireguard_link */ 2:
                    message.wireguardLink = WireGuardLink.internalBinaryRead(reader, reader.uint32(), options, message.wireguardLink);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateWireGuardLinkResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional common.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional wireguard.WireGuardLink wireguard_link = 2; */
        if (message.wireguardLink)
            WireGuardLink.internalBinaryWrite(message.wireguardLink, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.UpdateWireGuardLinkResponse
 */
export const UpdateWireGuardLinkResponse = new UpdateWireGuardLinkResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetWireGuardLinkRequest$Type extends MessageType<GetWireGuardLinkRequest> {
    constructor() {
        super("api_wireguard.GetWireGuardLinkRequest", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetWireGuardLinkRequest>): GetWireGuardLinkRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetWireGuardLinkRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetWireGuardLinkRequest): GetWireGuardLinkRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetWireGuardLinkRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.GetWireGuardLinkRequest
 */
export const GetWireGuardLinkRequest = new GetWireGuardLinkRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetWireGuardLinkResponse$Type extends MessageType<GetWireGuardLinkResponse> {
    constructor() {
        super("api_wireguard.GetWireGuardLinkResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status },
            { no: 2, name: "wireguard_link", kind: "message", T: () => WireGuardLink }
        ]);
    }
    create(value?: PartialMessage<GetWireGuardLinkResponse>): GetWireGuardLinkResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetWireGuardLinkResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetWireGuardLinkResponse): GetWireGuardLinkResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional common.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* optional wireguard.WireGuardLink wireguard_link */ 2:
                    message.wireguardLink = WireGuardLink.internalBinaryRead(reader, reader.uint32(), options, message.wireguardLink);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetWireGuardLinkResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional common.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional wireguard.WireGuardLink wireguard_link = 2; */
        if (message.wireguardLink)
            WireGuardLink.internalBinaryWrite(message.wireguardLink, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.GetWireGuardLinkResponse
 */
export const GetWireGuardLinkResponse = new GetWireGuardLinkResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListWireGuardLinksRequest$Type extends MessageType<ListWireGuardLinksRequest> {
    constructor() {
        super("api_wireguard.ListWireGuardLinksRequest", [
            { no: 1, name: "page", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "page_size", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "keyword", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "network_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ListWireGuardLinksRequest>): ListWireGuardLinksRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListWireGuardLinksRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListWireGuardLinksRequest): ListWireGuardLinksRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 page */ 1:
                    message.page = reader.int32();
                    break;
                case /* optional int32 page_size */ 2:
                    message.pageSize = reader.int32();
                    break;
                case /* optional string keyword */ 3:
                    message.keyword = reader.string();
                    break;
                case /* optional uint32 network_id */ 4:
                    message.networkId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListWireGuardLinksRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 page = 1; */
        if (message.page !== undefined)
            writer.tag(1, WireType.Varint).int32(message.page);
        /* optional int32 page_size = 2; */
        if (message.pageSize !== undefined)
            writer.tag(2, WireType.Varint).int32(message.pageSize);
        /* optional string keyword = 3; */
        if (message.keyword !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.keyword);
        /* optional uint32 network_id = 4; */
        if (message.networkId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.networkId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.ListWireGuardLinksRequest
 */
export const ListWireGuardLinksRequest = new ListWireGuardLinksRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListWireGuardLinksResponse$Type extends MessageType<ListWireGuardLinksResponse> {
    constructor() {
        super("api_wireguard.ListWireGuardLinksResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status },
            { no: 2, name: "total", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "wireguard_links", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WireGuardLink }
        ]);
    }
    create(value?: PartialMessage<ListWireGuardLinksResponse>): ListWireGuardLinksResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.wireguardLinks = [];
        if (value !== undefined)
            reflectionMergePartial<ListWireGuardLinksResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListWireGuardLinksResponse): ListWireGuardLinksResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional common.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* optional int32 total */ 2:
                    message.total = reader.int32();
                    break;
                case /* repeated wireguard.WireGuardLink wireguard_links */ 3:
                    message.wireguardLinks.push(WireGuardLink.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListWireGuardLinksResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional common.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 total = 2; */
        if (message.total !== undefined)
            writer.tag(2, WireType.Varint).int32(message.total);
        /* repeated wireguard.WireGuardLink wireguard_links = 3; */
        for (let i = 0; i < message.wireguardLinks.length; i++)
            WireGuardLink.internalBinaryWrite(message.wireguardLinks[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api_wireguard.ListWireGuardLinksResponse
 */
export const ListWireGuardLinksResponse = new ListWireGuardLinksResponse$Type();
