// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: rpc_master.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Master_ServerSend_FullMethodName          = "/master.Master/ServerSend"
	Master_PullClientConfig_FullMethodName    = "/master.Master/PullClientConfig"
	Master_PullServerConfig_FullMethodName    = "/master.Master/PullServerConfig"
	Master_FRPCAuth_FullMethodName            = "/master.Master/FRPCAuth"
	Master_PushProxyInfo_FullMethodName       = "/master.Master/PushProxyInfo"
	Master_PushClientStreamLog_FullMethodName = "/master.Master/PushClientStreamLog"
	Master_PushServerStreamLog_FullMethodName = "/master.Master/PushServerStreamLog"
	Master_PTYConnect_FullMethodName          = "/master.Master/PTYConnect"
)

// MasterClient is the client API for Master service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterClient interface {
	ServerSend(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientMessage, ServerMessage], error)
	PullClientConfig(ctx context.Context, in *PullClientConfigReq, opts ...grpc.CallOption) (*PullClientConfigResp, error)
	PullServerConfig(ctx context.Context, in *PullServerConfigReq, opts ...grpc.CallOption) (*PullServerConfigResp, error)
	FRPCAuth(ctx context.Context, in *FRPAuthRequest, opts ...grpc.CallOption) (*FRPAuthResponse, error)
	PushProxyInfo(ctx context.Context, in *PushProxyInfoReq, opts ...grpc.CallOption) (*PushProxyInfoResp, error)
	PushClientStreamLog(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PushClientStreamLogReq, PushStreamLogResp], error)
	PushServerStreamLog(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PushServerStreamLogReq, PushStreamLogResp], error)
	PTYConnect(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PTYClientMessage, PTYServerMessage], error)
}

type masterClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterClient(cc grpc.ClientConnInterface) MasterClient {
	return &masterClient{cc}
}

func (c *masterClient) ServerSend(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientMessage, ServerMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Master_ServiceDesc.Streams[0], Master_ServerSend_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClientMessage, ServerMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Master_ServerSendClient = grpc.BidiStreamingClient[ClientMessage, ServerMessage]

func (c *masterClient) PullClientConfig(ctx context.Context, in *PullClientConfigReq, opts ...grpc.CallOption) (*PullClientConfigResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PullClientConfigResp)
	err := c.cc.Invoke(ctx, Master_PullClientConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) PullServerConfig(ctx context.Context, in *PullServerConfigReq, opts ...grpc.CallOption) (*PullServerConfigResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PullServerConfigResp)
	err := c.cc.Invoke(ctx, Master_PullServerConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) FRPCAuth(ctx context.Context, in *FRPAuthRequest, opts ...grpc.CallOption) (*FRPAuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FRPAuthResponse)
	err := c.cc.Invoke(ctx, Master_FRPCAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) PushProxyInfo(ctx context.Context, in *PushProxyInfoReq, opts ...grpc.CallOption) (*PushProxyInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PushProxyInfoResp)
	err := c.cc.Invoke(ctx, Master_PushProxyInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) PushClientStreamLog(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PushClientStreamLogReq, PushStreamLogResp], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Master_ServiceDesc.Streams[1], Master_PushClientStreamLog_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PushClientStreamLogReq, PushStreamLogResp]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Master_PushClientStreamLogClient = grpc.ClientStreamingClient[PushClientStreamLogReq, PushStreamLogResp]

func (c *masterClient) PushServerStreamLog(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PushServerStreamLogReq, PushStreamLogResp], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Master_ServiceDesc.Streams[2], Master_PushServerStreamLog_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PushServerStreamLogReq, PushStreamLogResp]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Master_PushServerStreamLogClient = grpc.ClientStreamingClient[PushServerStreamLogReq, PushStreamLogResp]

func (c *masterClient) PTYConnect(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PTYClientMessage, PTYServerMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Master_ServiceDesc.Streams[3], Master_PTYConnect_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PTYClientMessage, PTYServerMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Master_PTYConnectClient = grpc.BidiStreamingClient[PTYClientMessage, PTYServerMessage]

// MasterServer is the server API for Master service.
// All implementations must embed UnimplementedMasterServer
// for forward compatibility.
type MasterServer interface {
	ServerSend(grpc.BidiStreamingServer[ClientMessage, ServerMessage]) error
	PullClientConfig(context.Context, *PullClientConfigReq) (*PullClientConfigResp, error)
	PullServerConfig(context.Context, *PullServerConfigReq) (*PullServerConfigResp, error)
	FRPCAuth(context.Context, *FRPAuthRequest) (*FRPAuthResponse, error)
	PushProxyInfo(context.Context, *PushProxyInfoReq) (*PushProxyInfoResp, error)
	PushClientStreamLog(grpc.ClientStreamingServer[PushClientStreamLogReq, PushStreamLogResp]) error
	PushServerStreamLog(grpc.ClientStreamingServer[PushServerStreamLogReq, PushStreamLogResp]) error
	PTYConnect(grpc.BidiStreamingServer[PTYClientMessage, PTYServerMessage]) error
	mustEmbedUnimplementedMasterServer()
}

// UnimplementedMasterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMasterServer struct{}

func (UnimplementedMasterServer) ServerSend(grpc.BidiStreamingServer[ClientMessage, ServerMessage]) error {
	return status.Errorf(codes.Unimplemented, "method ServerSend not implemented")
}
func (UnimplementedMasterServer) PullClientConfig(context.Context, *PullClientConfigReq) (*PullClientConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullClientConfig not implemented")
}
func (UnimplementedMasterServer) PullServerConfig(context.Context, *PullServerConfigReq) (*PullServerConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullServerConfig not implemented")
}
func (UnimplementedMasterServer) FRPCAuth(context.Context, *FRPAuthRequest) (*FRPAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FRPCAuth not implemented")
}
func (UnimplementedMasterServer) PushProxyInfo(context.Context, *PushProxyInfoReq) (*PushProxyInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushProxyInfo not implemented")
}
func (UnimplementedMasterServer) PushClientStreamLog(grpc.ClientStreamingServer[PushClientStreamLogReq, PushStreamLogResp]) error {
	return status.Errorf(codes.Unimplemented, "method PushClientStreamLog not implemented")
}
func (UnimplementedMasterServer) PushServerStreamLog(grpc.ClientStreamingServer[PushServerStreamLogReq, PushStreamLogResp]) error {
	return status.Errorf(codes.Unimplemented, "method PushServerStreamLog not implemented")
}
func (UnimplementedMasterServer) PTYConnect(grpc.BidiStreamingServer[PTYClientMessage, PTYServerMessage]) error {
	return status.Errorf(codes.Unimplemented, "method PTYConnect not implemented")
}
func (UnimplementedMasterServer) mustEmbedUnimplementedMasterServer() {}
func (UnimplementedMasterServer) testEmbeddedByValue()                {}

// UnsafeMasterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterServer will
// result in compilation errors.
type UnsafeMasterServer interface {
	mustEmbedUnimplementedMasterServer()
}

func RegisterMasterServer(s grpc.ServiceRegistrar, srv MasterServer) {
	// If the following call pancis, it indicates UnimplementedMasterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Master_ServiceDesc, srv)
}

func _Master_ServerSend_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MasterServer).ServerSend(&grpc.GenericServerStream[ClientMessage, ServerMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Master_ServerSendServer = grpc.BidiStreamingServer[ClientMessage, ServerMessage]

func _Master_PullClientConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullClientConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).PullClientConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_PullClientConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).PullClientConfig(ctx, req.(*PullClientConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_PullServerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullServerConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).PullServerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_PullServerConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).PullServerConfig(ctx, req.(*PullServerConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_FRPCAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FRPAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).FRPCAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_FRPCAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).FRPCAuth(ctx, req.(*FRPAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_PushProxyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushProxyInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).PushProxyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_PushProxyInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).PushProxyInfo(ctx, req.(*PushProxyInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_PushClientStreamLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MasterServer).PushClientStreamLog(&grpc.GenericServerStream[PushClientStreamLogReq, PushStreamLogResp]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Master_PushClientStreamLogServer = grpc.ClientStreamingServer[PushClientStreamLogReq, PushStreamLogResp]

func _Master_PushServerStreamLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MasterServer).PushServerStreamLog(&grpc.GenericServerStream[PushServerStreamLogReq, PushStreamLogResp]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Master_PushServerStreamLogServer = grpc.ClientStreamingServer[PushServerStreamLogReq, PushStreamLogResp]

func _Master_PTYConnect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MasterServer).PTYConnect(&grpc.GenericServerStream[PTYClientMessage, PTYServerMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Master_PTYConnectServer = grpc.BidiStreamingServer[PTYClientMessage, PTYServerMessage]

// Master_ServiceDesc is the grpc.ServiceDesc for Master service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Master_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "master.Master",
	HandlerType: (*MasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PullClientConfig",
			Handler:    _Master_PullClientConfig_Handler,
		},
		{
			MethodName: "PullServerConfig",
			Handler:    _Master_PullServerConfig_Handler,
		},
		{
			MethodName: "FRPCAuth",
			Handler:    _Master_FRPCAuth_Handler,
		},
		{
			MethodName: "PushProxyInfo",
			Handler:    _Master_PushProxyInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerSend",
			Handler:       _Master_ServerSend_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PushClientStreamLog",
			Handler:       _Master_PushClientStreamLog_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "PushServerStreamLog",
			Handler:       _Master_PushServerStreamLog_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "PTYConnect",
			Handler:       _Master_PTYConnect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc_master.proto",
}
